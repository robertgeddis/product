drop view if exists analytics.vw_INTL_Daily_Renewals_Downgrades_TEST_v2; 

grant select on analytics.vw_INTL_Daily_Renewals_Downgrades_TEST_v2 to reporting_ro, analytics_team;

create view analytics.vw_INTL_Daily_Renewals_Downgrades_TEST_v2 as
select
  coalesce(a.countrycode, b.countrycode) as countrycode,
  coalesce(a.date, b.date) as date,
  coalesce(a.week_start_date, b.week_start_date) as week_start_date,
  coalesce(a.current_date_sameday, b.current_date_sameday) as current_date_sameday,
  coalesce(a.member_type, b.member_type) as member_type,
  coalesce(a.vertical, b.vertical) as vertical,
  coalesce(a.payment_type, b.payment_type) as payment_type,
  coalesce(a.subscription_length, b.subscription_length) as subscription_length,
  coalesce(a.renewal_period, b.renewal_period) as renewal_period,
  coalesce(a.user_device, b.user_device) as user_device,
  sum(ifnull(a.renewals, 0)) as renewals,
  sum(ifnull(b.downgrades, 0)) as downgrades,
  sum(ifnull(a.renewals, 0) + ifnull(b.downgrades, 0)) as potential_renewals
from (
  /*Renewal data*/
  select
    a.countrycode ,ddd.date ,ddd.week_start_date ,dc.current_date_sameday
    ,initcap(a.role) as member_type
    ,a.priceplandurationinmonths as subscription_length
    ,case 
      when a.vertical = 'homeCare' then 'Housekeeping' 
      when (a.vertical IS NULL or a.vertical = '') then 'Childcare' 
      else initcap(lower(a.vertical))
    end as vertical
    ,a.payment_type
    ,case 
      when a.upgrade_device = 'smartphone' then 'Mobile'
      when a.upgrade_device = '' or a.upgrade_device is null then 'Mobile' 
      else initcap(lower(a.upgrade_device))
    end as user_device
   -- ,case when RNK = 2 then 'First Period Renewal' else 'Non-First Period Renewal' end as renewal_period
    ,case when RNK = 1 then 'First Period Renewal' else 'Non-First Period Renewal' end as renewal_period
    ,a.currency
    ,count(distinct a.memberid) as renewals
    ,sum(a.amountUSD) as renewal_bookings
  from (
    select
      sp.countrycode, sp.subscriptiondatecreated, sp.subscriptionenddate, sp.priceplandurationinmonths
      ,case when updev.device is null or updev.device = '' then m.device else updev.device end as upgrade_device
      ,t.id as transaction_id, sp.subscriptionid, t.amount, sp.currency, t.amount * fx.currency_rate as amountUSD
      ,sp.memberid, t.when_processed
      ,sp.priceplanid, sp.type
      ,cc.payment_type
      ,m.role, m.vertical, m.dateFirstPremiumSignup
      --,rank() OVER (PARTITION BY sp.memberid, sp.subscriptionid ORDER BY t.when_processed asc) as RNK
      ceiling(trunc(datediff(month,sp.subscriptiondatecreated, t.when_processed)/sp.pricePlanDurationInMonths)) as rnk 
    from intl.hive_subscription_plan sp
      join intl.hive_member m on sp.countrycode = m.countrycode and sp.memberid = m.memberid and m.IsInternalAccount = 'false' and m.role is not null
      join intl.transaction t on t.country_code = sp.countrycode and t.member_id = sp.memberid and t.subscription_plan_id = sp.subscriptionid 
        and t.type in ('PriorAuthCapture','AuthAndCapture') and t.status = 'SUCCESS' and t.amount > 0
      join reporting.DW_CARE_FX_RATES fx on lower(fx.source_currency) = lower(sp.currency) and fx.target_currency = 'USD' and fx.currency_rate_type = 'Current'
      join intl.credit_card cc on cc.id = t.credit_card_id and t.member_id = cc.member_id and t.country_code = cc.country_code
      join reporting.dw_d_date ddd on date(t.when_processed) = ddd.date
      left join intl.hive_event updev on updev.countrycode = sp.countrycode and updev.memberid = sp.memberid and updev.objectid = sp.subscriptionid 
        and date(updev.datecreated) = date(sp.subscriptiondatecreated) and updev.name = 'Upgrade'
      where date(sp.subscriptiondatecreated) < current_date()
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18
  ) a
    join reporting.DW_D_DATE ddd on date(a.when_processed) = ddd.date and ddd.date < current_date()
    join analytics.dw_d_date_current dc on dc.date = date(a.when_processed)
    where 1
    --and RNK > 1
    and RNK > 0
    and ddd.year >= 2019
    group by 1,2,3,4,5,6,7,8,9,10,11
) a full outer join (
  /*Downgrade data*/
  select 
    a.countrycode, ddd.date, ddd.week_start_date, dc.current_date_sameday
    ,initcap(a.role) as member_type
    ,a.priceplandurationinmonths as subscription_length
    ,case 
      when a.vertical = 'homeCare' then 'Housekeeping' 
      when (a.vertical IS NULL or a.vertical = '') then 'Childcare' 
      else initcap(lower(a.vertical))
    end as vertical
    ,a.payment_type
    ,case 
      when a.upgrade_device = 'smartphone' then 'Mobile'
      when a.upgrade_device = '' or a.upgrade_device is null then 'Mobile' 
      else initcap(lower(a.upgrade_device))
    end as user_device
    ,case 
      when datediff('month', a.subscriptiondatecreated, a.subscriptionenddate)/priceplandurationinmonths = 1 then 'First Period Renewal'
      else 'Non-First Period Renewal'
     end as renewal_period
    ,count(distinct a.memberid) as downgrades
  from (
    select
      sp.countrycode, sp.subscriptiondatecreated, sp.subscriptionenddate, sp.priceplandurationinmonths
      ,case when updev.device is null or updev.device = '' then m.device else updev.device end as upgrade_device
      ,t.id as transaction_id, sp.subscriptionid, t.amount, sp.currency, t.amount * fx.currency_rate as amountUSD
      ,sp.memberid, t.when_processed
      ,sp.priceplanid, sp.type
      ,cc.payment_type
      ,m.role, m.vertical, m.dateFirstPremiumSignup
    from intl.hive_subscription_plan sp
      join intl.hive_member m on sp.countrycode = m.countrycode and sp.memberid = m.memberid and m.IsInternalAccount = 'false' and m.role is not null
      join intl.transaction t on t.country_code = sp.countrycode and t.member_id = sp.memberid and t.subscription_plan_id = sp.subscriptionid 
        and t.type in ('PriorAuthCapture','AuthAndCapture') and t.status = 'SUCCESS' and t.amount > 0
      join reporting.DW_CARE_FX_RATES fx on lower(fx.source_currency) = lower(sp.currency) and fx.target_currency = 'USD' and fx.currency_rate_type = 'Current'
      join intl.credit_card cc on cc.id = t.credit_card_id and t.member_id = cc.member_id and t.country_code = cc.country_code
      join reporting.dw_d_date ddd on date(t.when_processed) = ddd.date
      left join intl.hive_event updev on updev.countrycode = sp.countrycode and updev.memberid = sp.memberid and updev.objectid = sp.subscriptionid 
        and date(updev.datecreated) = date(sp.subscriptiondatecreated) and updev.name = 'Upgrade'
      where date(sp.subscriptiondatecreated) < current_date()
  ) a
    join reporting.DW_D_DATE ddd on date(a.subscriptionenddate) = ddd.date and ddd.date < current_date() 
    join analytics.dw_d_date_current dc on dc.date = date(a.subscriptionenddate)
    where ddd.year >= 2019
    group by 1,2,3,4,5,6,7,8,9,10
) b on
      a.countrycode = b.countrycode
      and a.date = b.date
      and a.member_type = b.member_type
      and a.subscription_length = b.subscription_length
      and a.vertical = b.vertical
      and a.payment_type = b.payment_type
      and a.renewal_period = b.renewal_period
      and a.user_device = b.user_device
group by 1,2,3,4,5,6,7,8,9,10
